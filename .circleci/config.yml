version: 2.1

# ---------------------------------------------------------------------------- #

workflows:

  version: 2

  tag:
    jobs:
      - checkout:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
      - versions:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
      - deps:
          requires:
            - checkout
          filters:
            branches:
              only: main
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
      - unit-test:
          requires:
            - deps
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
      - compile:
          matrix:
            parameters:
              arch: [amd64, arm64]
          requires:
            - deps
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
      - package-debian:
          matrix:
            parameters:
              arch: [amd64, arm64]
          requires:
            - compile-<< matrix.arch >>
            - versions
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
      - package-docker:
          matrix:
            parameters:
              arch: [amd64, arm64]
          requires:
            - package-debian-<< matrix.arch >>
            - versions
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
      - blackbox-test:
          matrix:
            parameters:
              arch: [amd64, arm64]
          requires:
            - package-debian-<< matrix.arch >>
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
      - publish:
          requires:
            - unit-test
            - blackbox-test
            - package-docker
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
      - release:
          requires:
            - publish
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/

  commit:
    jobs:
      - checkout
      - versions
      - deps:
          requires:
            - checkout
      - unit-test:
          requires:
            - deps
      - compile:
          matrix:
            parameters:
              arch: [amd64, arm64]
          requires:
            - deps
      - package-debian:
          matrix:
            parameters:
              arch: [amd64, arm64]
          requires:
            - compile-<< matrix.arch >>
            - versions
      - package-docker:
          matrix:
            parameters:
              arch: [amd64, arm64]
          requires:
            - package-debian-<< matrix.arch >>
            - versions
      - blackbox-test:
          matrix:
            parameters:
              arch: [amd64, arm64]
          requires:
            - package-debian-<< matrix.arch >>
      - publish:
          requires:
            - unit-test
            - blackbox-test
            - package-docker

  rolling_contract:
    triggers:
      - schedule:
          cron: "0 * * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - blackbox-test:
          matrix:
            parameters:
              arch: [amd64, arm64]

# ---------------------------------------------------------------------------- #

executors:

  git:
    docker:
      - image: docker.io/alpine/git

  machine-arm64:
    machine:
      image: ubuntu-2004:202111-01
      docker_layer_caching: false
      resource_class: arm.medium

  machine-amd64:
    machine:
      image: ubuntu-2004:202111-01
      docker_layer_caching: false
      resource_class: medium

  debian:
    docker:
      - image: docker.io/jancajthaml/debian-packager:latest

# ---------------------------------------------------------------------------- #

jobs:

  # -------------------------------------------------------------------------- #

  checkout:
    executor: git
    working_directory: /home/circleci/project
    steps:
      - checkout
      - save_cache:
          key: code-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - /home/circleci/project/.git
            - /home/circleci/project/dev
            - /home/circleci/project/services
            - /home/circleci/project/packaging
            - /home/circleci/project/Dockerfile
            - /home/circleci/project/docker-compose.yml
            - /home/circleci/project/Makefile

  # -------------------------------------------------------------------------- #

  versions:
    executor: git
    working_directory: /home/circleci/project
    steps:
      - checkout
      - run:
          name: Update VERSION + META
          command: |
            if [ -z "<< pipeline.git.tag >>" ] ; then
              tags=$(git tag --sort=-v:refname | head -1)
              if [ -z ${tags} ] ; then
                echo -e "0.0.0" > /home/circleci/project/VERSION
              else
                echo -e "${tags#v}" > /home/circleci/project/VERSION
              fi
              echo -e "<< pipeline.git.branch >>" | sed 's:.*/::' > /home/circleci/project/META
            else
              echo -e "<< pipeline.git.tag >>" | sed -e "s/^v//" > /home/circleci/project/VERSION
              echo -e "main" > /home/circleci/project/META
            fi
      - save_cache:
          key: versions-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - /home/circleci/project/VERSION
            - /home/circleci/project/META

  # -------------------------------------------------------------------------- #

  deps:
    executor: machine-amd64
    working_directory: /home/circleci/project
    environment:
      ARCH: amd64
    steps:
      - restore_cache:
          key: code-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Sync lake dependencies
          command: |
            docker-compose run --rm sync \
              --source /rust/src/github.com/jancajthaml-openbank/lake
      - save_cache:
          key: dependencies-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - /home/circleci/project/services/lake/target

  # -------------------------------------------------------------------------- #

  unit-test:
    executor: machine-amd64
    working_directory: /home/circleci/project
    environment:
      ARCH: amd64
    steps:
      - restore_cache:
          key: code-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: dependencies-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Unit test lake
          command: |
            docker-compose run --rm test \
              --source /rust/src/github.com/jancajthaml-openbank/lake \
              --output /project/reports/unit-tests
          no_output_timeout: 5m
      - store_test_results:
          path: /home/circleci/project/reports/unit-tests

  # -------------------------------------------------------------------------- #

  compile:
    parameters:
      arch:
        type: string
    executor: machine-<< parameters.arch >>
    working_directory: /home/circleci/project
    environment:
      ARCH: << parameters.arch >>
    steps:
      - restore_cache:
          key: code-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: dependencies-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - run: docker pull docker.io/jancajthaml/rust:<< parameters.arch >>
      - run:
          name: Compile lake binary
          command: |
            docker-compose run --rm package \
              --arch linux/<< parameters.arch >> \
              --source /rust/src/github.com/jancajthaml-openbank/lake \
              --output /project/packaging/bin
          no_output_timeout: 5m
      - save_cache:
          key: binaries-<< parameters.arch >>-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - /home/circleci/project/packaging/bin

  # -------------------------------------------------------------------------- #

  package-debian:
    parameters:
      arch:
        type: string
    executor: debian
    working_directory: /home/circleci/project
    steps:
      - restore_cache:
          key: code-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: binaries-<< parameters.arch >>-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: versions-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Package for debian << parameters.arch >>
          command: |
            VERSION=$(cat /home/circleci/project/VERSION)
            /home/circleci/project/dev/lifecycle/debian \
              --arch << parameters.arch >> \
              --pkg lake \
              --version ${VERSION} \
              --source /home/circleci/project/packaging
          no_output_timeout: 5m
      - save_cache:
          key: debian-<< parameters.arch >>-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - /home/circleci/project/packaging/bin

  # -------------------------------------------------------------------------- #

  package-docker:
    parameters:
      arch:
        type: string
    executor: machine-<< parameters.arch >>
    working_directory: /home/circleci/project
    steps:
      - restore_cache:
          key: code-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: binaries-<< parameters.arch >>-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: debian-<< parameters.arch >>-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: versions-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Package for docker << parameters.arch >>
          command: |
            mkdir -p tmp

            docker build \
              -t docker.io/openbank/lake:<< pipeline.git.revision >> \
              -f ./packaging/docker/<< parameters.arch >>/Dockerfile .

            docker save \
              docker.io/openbank/lake:<< pipeline.git.revision >> \
              > tmp/docker-lake-<< pipeline.git.revision >>.tar
      - save_cache:
          key: docker-<< parameters.arch >>-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - /home/circleci/project/tmp

  # -------------------------------------------------------------------------- #

  publish:
    executor: git
    working_directory: /home/circleci/project
    steps:
      - restore_cache:
          key: versions-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: docker-arm64-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: docker-amd64-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Restore docker image
          command: |
            docker load < tmp/docker-lake-arm64.tar
            docker load < tmp/docker-lake-amd64.tar
      - run:
          name: Publish to docker.io
          command: |
            export VERSION=$(cat /home/circleci/project/VERSION)
            export META=$(cat /home/circleci/project/META)

            docker images

            exit 1

            #echo ${DOCKER_PASSWORD} | docker login docker.io -u ${DOCKER_USER} --password-stdin

            #docker push docker.io/openbank/lake:${ARCH}-${VERSION}.${META}

            #rm -f /home/circleci/.docker/config.json
      - run:
          name: Publish to docker.pkg.github.com
          command: |
            export VERSION=$(cat /home/circleci/project/VERSION)
            
            docker load < rook-ceph.tar

            #echo ${GITHUB_RELEASE_TOKEN} | docker login docker.pkg.github.com -u ${DOCKER_USER} --password-stdin

            #docker push docker.pkg.github.com/jancajthaml-openbank/lake/lake:${ARCH}-${VERSION}

            #rm -f /home/circleci/.docker/config.json

  # -------------------------------------------------------------------------- #

  blackbox-test:
    parameters:
      arch:
        type: string
    executor: machine-<< parameters.arch >>
    working_directory: /home/circleci/project
    steps:
      - checkout
      - restore_cache:
          key: debian-<< parameters.arch >>-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - run: docker pull docker.io/jancajthaml/bbtest:<< parameters.arch >>
      - run:
          name: Update VERSION + META
          command: |
            if [ -z "<< pipeline.git.tag >>" ] ; then
              tags=$(git tag --sort=-v:refname | head -1)
              if [ -z ${tags} ] ; then
                echo -e "0.0.0" > /home/circleci/project/VERSION
              else
                echo -e "${tags#v}" > /home/circleci/project/VERSION
              fi
              echo -e "<< pipeline.git.branch >>" | sed 's:.*/::' > /home/circleci/project/META
            else
              echo -e "<< pipeline.git.tag >>" | sed -e "s/^v//" > /home/circleci/project/VERSION
              echo -e "main" > /home/circleci/project/META
            fi
      - run:
          name: Run blackbox tests << parameters.arch >>
          command: |
            export VERSION=$(cat /home/circleci/project/VERSION)
            export META=$(cat /home/circleci/project/META)
            export ARCH=<< parameters.arch >>

            docker-compose up -d bbtest
            docker exec -t $(docker-compose ps -q bbtest) python3 /opt/app/bbtest/main.py
            docker-compose down -v
          no_output_timeout: 30m
      - store_test_results:
          path: /home/circleci/project/reports/blackbox-tests/junit
      - store_artifacts:
          path: /home/circleci/project/reports/blackbox-tests
          destination: reports

  # -------------------------------------------------------------------------- #

  release:
    executor: debian
    working_directory: /home/circleci/project
    steps:
      - restore_cache:
          key: code-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: binaries-amd64-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: binaries-arm64-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: debian-amd64-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: debian-arm64-<< pipeline.git.tag >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_SHA1 }}
      - deploy:
          name: Release artifacts to github
          command: |
            /home/circleci/project/dev/lifecycle/release \
              --version ${CIRCLE_TAG} \
              --token ${GITHUB_RELEASE_TOKEN}

# ---------------------------------------------------------------------------- #
