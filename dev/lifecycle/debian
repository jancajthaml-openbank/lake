#!/bin/bash

set -eu
trap exit INT TERM

VERSION=""
TARGET_ARCHITECTURE=""

while [ $# -gt 0 ] ; do
key="$1"

case $key in

  --arch)
    TARGET_ARCHITECTURE="$2"
    shift
    shift
  ;;

  -v|--version)
    VERSION="$2"
    shift
    shift
  ;;

  *)
    shift
  ;;

esac
done

if [ ! "${VERSION}" ] ; then
  (>&2 echo "version not provided")
  exit 1
fi

if [ ! "${TARGET_ARCHITECTURE}" ] ; then
  (>&2 echo "target architecture not provided (use e.g. --arch amd64)")
  exit 1
fi

generate_manpage() {
  mkdir -p ${DEB_SOURCES}/usr/share/man/man8

  target="${DEB_SOURCES}/usr/share/man/man8/lake.8"

  if [ -f ${target} ] ; then
    rm -f ${target}
  fi

  if [ -f ${target}.gz ] ; then
    rm -f ${target}.gz
  fi

cat > ${target} <<EOL
.TH LAKE 8 2019 "Lake" "OpenBank Message Relay"
.SH NAME
lake \- starts openbank message relay
.SH DESCRIPTION
The
.B pldd
lake relay transforms publish messages to pull queue for openbank services
.EE
EOL

  cat ${target} | gzip -n -9 > ${target}.Debian.gz
  rm ${target}
}

generate_changelog() {
  mkdir -p ${DEB_SOURCES}/usr/share/doc/lake

  target="${DEB_SOURCES}/usr/share/doc/lake/changelog"

  if [ -f ${target} ] ; then
    rm -f ${target}
  fi

  if [ -f ${target}.Debian.gz ] ; then
    rm -f ${target}.Debian.gz
  fi

  touch ${target}

  VER="${VERSION}"
  tag=HEAD
  ADDS=$(echo ${VER} | sed -e 's/~.*//' | cut -s -d- -f2 | sed '/^[[:space:]]*$/d')

  if [[ -z "${ADDS// }" ]] ; then
    DATE=$(date '+%a, %-d %b %Y %H:%M:%S %z')
    echo "lake (${VER}) unstable; urgency=low" >> ${target}
    echo "" >> ${target}
    echo "  * includes non-released commits" >> ${target}
    echo "" >> ${target}
    echo " -- Jan Cajthaml <jan.cajthaml@gmail.com>  ${DATE}" >> ${target}
    echo "" >> ${target}
  fi

  PAIRS=()
  prev_tag=HEAD
  for tag in $(git tag --sort=-v:refname | awk '{arr[i++]=$0} END {while (i>0) print arr[--i] }') ; do
    PAIRS+=("${prev_tag} ${tag}")
    prev_tag=${tag}
  done

  idx=( ${!PAIRS[@]} )
  for ((i=${#idx[@]} - 1; i >= 0; i--)) ; do
    tag_from=${PAIRS[idx[i]]%% *}
    tag_to=${PAIRS[idx[i]]#* }

    DATE=$(git log -1 --format=%cD ${tag_to})

    commits=$(echo "$(git log --no-merges --pretty=oneline --pretty=format:%s ^${tag_from} ${tag_to})" | sed '/^[[:space:]]*$/d' | uniq)

    if [[ -n "${commits// }" ]] ; then

      echo "lake (${tag_to#v}) stable; urgency=low" >> ${target}
      echo "" >> ${target}

      echo "${commits}" | \
      while read note ; do
        echo "  * $(tr '[:lower:]' '[:upper:]' <<< ${note:0:1})${note:1}" >> ${target}
      done

      echo "" >> ${target}

      echo " -- Jan Cajthaml <jan.cajthaml@gmail.com>  ${DATE}" >> ${target}
      echo "" >> ${target}
    fi
  done

  cat ${target} | gzip -n -9 > ${target}.Debian.gz
  rm ${target}
}

################################################################################

PKGS="$(pwd)/packaging"
DEB_SOURCES="${PKGS}/debian_${TARGET_ARCHITECTURE}"
BIN_SOURCES="${PKGS}/bin"

if [ ! -d "${DEB_SOURCES}" ] ; then
  (>&2 echo "packaging for ${TARGET_ARCHITECTURE} is not supported")
  exit 1
fi

if [ ! -f "${BIN_SOURCES}/lake-linux-${TARGET_ARCHITECTURE}" ] ; then
  (>&2 echo "did not found binary to package at ${BIN_SOURCES}/lake-linux-${TARGET_ARCHITECTURE}")
  exit 1
fi

mkdir -p ${DEB_SOURCES}/usr/bin
if [ -f "${DEB_SOURCES}/usr/bin/lake" ] ; then
  rm -f ${DEB_SOURCES}/usr/bin/lake
fi

case ${TARGET_ARCHITECTURE} in

  armhf)
    arm-linux-gnueabihf-objcopy \
      --strip-debug \
      --strip-unneeded \
      "${BIN_SOURCES}/lake-linux-${TARGET_ARCHITECTURE}" \
      "${DEB_SOURCES}/usr/bin/lake"
  ;;

  arm64)
    aarch64-linux-gnu-objcopy \
      --strip-debug \
      --strip-unneeded \
      "${BIN_SOURCES}/lake-linux-${TARGET_ARCHITECTURE}" \
      "${DEB_SOURCES}/usr/bin/lake"
  ;;

  amd64)
    objcopy \
      --strip-debug \
      --strip-unneeded \
      "${BIN_SOURCES}/lake-linux-${TARGET_ARCHITECTURE}" \
      "${DEB_SOURCES}/usr/bin/lake"
  ;;

  *)
    cp \
      "${BIN_SOURCES}/lake-linux-${TARGET_ARCHITECTURE}" \
      "${DEB_SOURCES}/usr/bin/lake"
  ;;

esac

generate_changelog
generate_manpage

sed -i 's/Version.*/Version: '${VERSION#v}'/' "${DEB_SOURCES}/DEBIAN/control"

find "${BIN_SOURCES}" -name "lake_*_${TARGET_ARCHITECTURE}.deb" -exec rm -f {} \;

dpkg-deb --build "${DEB_SOURCES}" "${BIN_SOURCES}"

find "${BIN_SOURCES}" -name "lake_*_${TARGET_ARCHITECTURE}.deb" -exec fakeroot lintian --pedantic {} \;
find "${BIN_SOURCES}" -name "lake_*_${TARGET_ARCHITECTURE}.deb" -exec du -hs {} \;

exit 0
