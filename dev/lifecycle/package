#!/bin/bash

set -Eeuo pipefail
trap exit INT TERM

dist=bin
platforms=(darwin)

sem_open() {
  mkfifo pipe-$$
  exec 3<>pipe-$$
  rm pipe-$$
  local parallelism=${1}
  for ((;parallelism>0;parallelism--)) ; do
    printf %s 000 >&3
  done
}

sem_put() {
  local x
  read -u 3 -n 3 x && ((0==x)) || {
    exit $x
  }
  (
    "$@"
    printf '%.3d' $? >&3
  )&
}

get_version() {
  version=$(git rev-parse --abbrev-ref HEAD 2> /dev/null | rev | cut -d/ -f1 | rev)
  if [ $? -ne 0 ] || [[ "${version}" == "master" ]] ; then
    version=latest
  fi
  echo "${version}"
}

package_service() {
  local output=${1}/${2}-${3}
  if [ -f ${output} ] ; then
    rm -f ${output}
  fi

  echo "[info] packaging for ${2}"

  GOOS=${2} \
  GOARCH=amd64 \
  CGO_ENABLED=1 \
  \
  go build -a -o ${output} \
  \
  --ldflags "-X main.version=${3}" || {
    (>&2 echo "unable to build ${2} distribution")
    exit 1
  }

  chmod +x ${output}
}

while [[ $# -gt 0 ]] ; do
key="$1"

case $key in
    -t|--target)
    IFS=',' read -ra platforms <<< "$2"
    shift
    shift
    ;;
    -o|--output)
    dist="$2"
    shift
    shift
    ;;
    *)
    shift
    ;;
esac
done

sem_open $(getconf _NPROCESSORS_ONLN)

echo "[info] cleaning"
go clean

version=$(get_version)
echo "[info] packaging ${version}"
for platform in "${platforms[@]}" ; do
  sem_put package_service ${dist} ${platform} ${version}
done
wait

ls -1 ${dist} | sed "s/.*/       + ${dist}\/&/"

if [ ! -f ${dist}/linux-${version} ] ; then
  echo "[error] ${dist}/linux-${version} not found"
  exit 1
else
  cp ${dist}/linux-${version} ${dist}/entrypoint
fi

echo "[info] done"
