#!/bin/bash

set -eu
trap exit INT TERM

################################################################################

ARCH="amd64"
PLATFORM="linux"
SOURCE=""
OUTPUT=""
while [ $# -gt 0 ] ; do
key="$1"
case $key in
  --arch)   ARCH=${2#*/}; PLATFORM=${2%%/*}; shift; shift; ;;
  --source) SOURCE="$2";                     shift; shift; ;;
  --output) OUTPUT="$2";                     shift; shift; ;;
  *)                                         shift;        ;;
esac
done

################################################################################

if [ -z "${SOURCE}" ] ; then
  (>&2 echo "[error] source package not provided")
  exit 1
fi

if [ -z "${OUTPUT}" ] ; then
  (>&2 echo "[error] output not provided")
  exit 1
fi

OUTPUT_FILE=${OUTPUT}/$(basename ${SOURCE})-${PLATFORM}-${ARCH}

################################################################################

lifecycle::rust::clean() {
  local source="$1"
  if [ -z ${source} -o ! -d ${source} ] ; then
    return
  fi
  local output="$2"
  if [ -z ${output} -o ! -d ${output} ] ; then
    return
  fi

  find "${output}" -name "$(basename ${source})*${ARCH}*" -exec rm -f {} \;
  echo "[info] ${output} cleaned"
}

lifecycle::rust::build() {
  local source="$1"
  if [ -z ${source} -o ! -d ${source} ] ; then
    return
  fi

  local output="$2"
  if [ -z ${output} ] ; then
    return
  fi

  case ${ARCH} in

    arm64)
      CC=clang-13 \
      RUSTFLAGS="-Clinker-plugin-lto -Clinker=clang-13 -Clink-arg=-fuse-ld=lld-13" \
      LIBZMQ_INCLUDE_DIR=/usr/include \
      LIBZMQ_LIB_DIR=/usr/lib/aarch64-linux-gnu \
      PKG_CONFIG_ALLOW_CROSS=0 \
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=clang-13 \
      CARGO_HOME=${source}/target \
      \
      cargo build \
        --release \
        --target=aarch64-unknown-linux-gnu \
        --manifest-path=${source}/Cargo.toml \
        --target-dir=${source}/target || {
        (>&2 echo "[error] ${output} unable to build")
        exit 1
      }

      mkdir -p $(dirname "${output}")
      cp "${source}/target/aarch64-unknown-linux-gnu/release/main" "${output}"
    ;;

    amd64)
      #RUSTFLAGS="-Clink-arg=-fuse-ld=lld" \
      CC=gcc \
      LIBZMQ_INCLUDE_DIR=/usr/include \
      LIBZMQ_LIB_DIR=/usr/lib/x86_64-linux-gnu \
      PKG_CONFIG_ALLOW_CROSS=0 \
      CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=gcc \
      CARGO_HOME=${source}/target \
      \
      cargo build \
        --release \
        --target=x86_64-unknown-linux-gnu \
        --manifest-path=${source}/Cargo.toml \
        --target-dir=${source}/target || {
        (>&2 echo "[error] ${output} unable to build")
        exit 1
      }

      mkdir -p $(dirname "${output}")
      cp "${source}/target/x86_64-unknown-linux-gnu/release/main" "${output}"
    ;;

    *)
      (>&2 echo "[error] ${output} unsupported target")
      exit 1
    ;;

  esac

  chmod +x ${output}

  echo "[info] ${output} compiled"
}

lifecycle::rust::strip() {
  local output="$1"
  if [ -z ${output} -o ! -f ${output} ] ; then
    return
  fi

  case ${ARCH} in

    arm64)
      aarch64-linux-gnu-objcopy --strip-unneeded ${output}
    ;;

    amd64)
      objcopy --strip-unneeded ${output}
    ;;

    *)
    ;;

  esac

  echo "[info] ${output} stripped"
}

################################################################################

lifecycle::rust::clean \
  ${SOURCE} \
  ${OUTPUT}

lifecycle::rust::build \
  ${SOURCE} \
  ${OUTPUT_FILE}

lifecycle::rust::strip \
  ${OUTPUT_FILE}

du -hs ${OUTPUT_FILE}
